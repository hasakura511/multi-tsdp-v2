#!/usr/bin/python
# -*- coding: utf-8 -*-

import datetime
import Queue
from abc import ABCMeta, abstractmethod
from event import FillEvent, OrderEvent

class ExecutionHandler(object):
    """handles interaction between a set of order objects generated by     
    Portfolio and the Fill objects that occur in the market. Handlers used to 
    simulate brokerages or trade live. 
    """
    
    __metaclass__ = ABCMeta
    
    @abstractmethod
    def execute_order(self, event):
        """Executes order event, then creates fill event and puts it into
        queue   
        """
        raise NotImplementedError("Should implement execute_order()")  

class SimulatedExecutionHandler(ExecutionHandler):
    """converts all order objects into fill objects. No latency, slippage,
    fill-ratio."""
    
    def __init__(self,events):
        self.events = events # Queue of Events
    
    def execute_order(self,event):
        if event.type == 'ORDER':
            fill_event = FillEvent(datetime.datetime.utcnow(), event.symbol,
                                   'ARCA', event.quantity, event.direction, 
                                   None)
            self.events.put(fill_event)
            
